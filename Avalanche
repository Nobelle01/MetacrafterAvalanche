// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract AssertionContract {
    uint256 public totalSupply;
    mapping(address => uint256) public balances;

    constructor(uint256 _initialSupply) {
        totalSupply = _initialSupply;
        balances[msg.sender] = totalSupply;
    }

    function transfer(address _to, uint256 _amount) external {
        require(balances[msg.sender] >= _amount, "Insufficient balance");

        balances[msg.sender] -= _amount;
        balances[_to] += _amount;
    }

    function assertExample() external pure {
        uint256 a = 10;
        uint256 b = 5;
        assert(a > b);
    }

    function revertExample() external pure {
        uint256 a = 10;
        uint256 b = 20;
        if (a <= b) {
            revert("Invalid condition");
        }
    }
}
